# Project Design Document

## Table of Contents

1. [Project Overview](#project-overview)
2. [Architecture and Technology Stack](#architecture-and-technology-stack)
3. [Database Design](#database-design)
   - [Current Supabase Schema Analysis](#current-supabase-schema-analysis)
   - [Recommended Improvements](#recommended-improvements)
4. [Modules and Features](#modules-and-features)
   - [1. Navbar](#1-navbar)
   - [2. Home Page](#2-home-page)
     - [2.1 Comparison Table](#21-comparison-table)
     - [2.2 Share Bill Button and Pop-up](#22-share-bill-button-and-pop-up)
     - [2.3 Comparison Charts](#23-comparison-charts)
   - [3. Authentication](#3-authentication)
     - [3.1 Sign In / Sign Up](#31-sign-in--sign-up)
     - [3.2 User Profile](#32-user-profile)
   - [4. Supabase Integration](#4-supabase-integration)
   - [5. API Routes](#5-api-routes)
5. [Detailed Step-by-Step Instructions](#detailed-step-by-step-instructions)
   - [1. Setting Up the Project](#1-setting-up-the-project)
   - [2. Configuring Environment Variables](#2-configuring-environment-variables)
   - [3. Implementing Authentication with Clerk](#3-implementing-authentication-with-clerk)
   - [4. Designing the Navbar](#4-designing-the-navbar)
   - [5. Building the Home Page](#5-building-the-home-page)
     - [5.1 Creating the Comparison Table](#51-creating-the-comparison-table)
     - [5.2 Implementing the Share Bill Feature](#52-implementing-the-share-bill-feature)
     - [5.3 Adding Comparison Charts](#53-adding-comparison-charts)
   - [6. Integrating Supabase](#6-integrating-supabase)
   - [7. Setting Up RLS Policies](#7-setting-up-rls-policies)
   - [8. Deploying the Application](#8-deploying-the-application)
6. [Codebase Suggestions](#codebase-suggestions)
7. [Conclusion](#conclusion)

---

## Project Overview

**Project Name:** Anonim Mobil Fatura Takip√ßisi

**Purpose:**  
The project aims to provide users with an anonymous platform to compare their mobile phone bills with different GSM operators. Users can share their bill information anonymously to contribute to community-driven comparisons, helping others make informed decisions.

---

## Architecture and Technology Stack

- **Frontend:**
  - **Next.js 15 RC:** React framework for server-rendered applications.
  - **React 19 RC:** JavaScript library for building user interfaces.
  - **TailwindCSS:** Utility-first CSS framework.
  - **Shadcn UI:** Component library for React.
  - **Recharts:** Library for building charts and visualizations.

- **Authentication:**
  - **Clerk:** User authentication and management.

- **Backend & Database:**
  - **Supabase:** Backend as a Service (BaaS) providing a PostgreSQL database, authentication, and real-time capabilities.

- **Other Tools:**
  - **TypeScript:** Typed superset of JavaScript.
  - **Next.js App Router:** File-based routing system.
  - **Radix UI:** Primitives for building accessible components.

---

## Database Design

### Current Supabase Schema Analysis

**Tables:**

1. **providers**
   - **Purpose:** Store information about GSM operators.
   - **Columns:**
     - `id`: UUID, Primary Key.
     - `name`: Text, Not Null.
     - Multiple `*_gb_price`: Numeric, Nullable (e.g., `five_gb_price`, `ten_gb_price`, etc.).
     - `voice_call_limit`: Integer, Nullable.
     - `sms_limit`: Integer, Nullable.
     - `created_at`: Timestamp with time zone, Nullable.
     - `updated_at`: Timestamp with time zone, Nullable.
   
2. **user_bills**
   - **Purpose:** Store user-submitted bill information.
   - **Columns:**
     - `id`: UUID, Primary Key.
     - `phone_number`: Text, Not Null.
     - `provider_id`: UUID, Nullable (Foreign Key to `providers.id`).
     - `gigabyte_package`: Integer, Not Null.
     - `voice_call_limit`: Integer, Nullable.
     - `sms_limit`: Integer, Nullable.
     - `bill_price`: Numeric, Not Null.
     - `contract_renewal_month`: Integer, Not Null.
     - `created_at`: Timestamp with time zone, Nullable.
     - `updated_at`: Timestamp with time zone, Nullable.
     - `user_id`: Text, Nullable.

**Observations:**

- **Normalization:** The `providers` table contains multiple columns for different GB prices, which can lead to scalability issues as more packages are added.
- **Foreign Keys:** The `user_bills` table has a `provider_id`, but explicit foreign key constraints are not mentioned.
- **User Association:** The `user_bills` table includes a `user_id` field, but its relationship with Clerk's user management system needs clarification.
- **Security:** No Row-Level Security (RLS) policies are currently set up, which are crucial for protecting user data.

### Recommended Improvements

1. **Normalize the Providers Table:**
   - **Current Issue:** Multiple columns for GB prices (`five_gb_price`, `ten_gb_price`, etc.) make it difficult to manage and scale.
   - **Solution:** Create a separate `packages` table to manage different gigabyte packages.

2. **Establish Foreign Key Constraints:**
   - Ensure that `user_bills.provider_id` references `providers.id`.

3. **Clarify User Association:**
   - The `user_id` in `user_bills` should correspond to Clerk's `user_id`. Ensure consistency between Clerk and Supabase user identifiers.

4. **Implement Row-Level Security (RLS):**
   - **Purpose:** Protect user data by ensuring that users can only access their own bills.
   - **Action:** Define RLS policies for the `user_bills` table.

5. **Indexing:**
   - Add indexes on columns frequently used in queries, such as `provider_id` and `user_id`.

6. **Timestamp Defaults:**
   - Set default values for `created_at` and `updated_at` columns to automate timestamping.

#### Revised Supabase Schema

1. **providers**
   ```sql
   CREATE TABLE providers (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     name TEXT NOT NULL,
     voice_call_limit INTEGER,
     sms_limit INTEGER,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     updated_at TIMESTAMPTZ DEFAULT NOW()
   );
   ```

2. **packages**
   ```sql
   CREATE TABLE packages (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     provider_id UUID REFERENCES providers(id),
     gigabytes INTEGER NOT NULL,
     price NUMERIC NOT NULL,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     updated_at TIMESTAMPTZ DEFAULT NOW()
   );
   ```

3. **user_bills**
   ```sql
   CREATE TABLE user_bills (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     phone_number TEXT NOT NULL,
     provider_id UUID REFERENCES providers(id),
     package_id UUID REFERENCES packages(id),
     voice_call_limit INTEGER,
     sms_limit INTEGER,
     bill_price NUMERIC NOT NULL,
     contract_renewal_month INTEGER NOT NULL,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     updated_at TIMESTAMPTZ DEFAULT NOW(),
     user_id TEXT REFERENCES users(id) -- Assuming a 'users' table exists
   );
   ```

4. **Row-Level Security (RLS):**
   ```sql
   -- Enable RLS on user_bills
   ALTER TABLE user_bills ENABLE ROW LEVEL SECURITY;

   -- Create policy for authenticated users to access their own bills
   CREATE POLICY "Users can access their own bills" ON user_bills
   FOR ALL
   USING (user_id = auth.uid());
   ```

---

## Modules and Features

### 1. Navbar

**Features:**

- **Logo and Project Name:** Positioned at the top-left.
- **Sign In Button:** Positioned at the top-right.
- **Responsive Design:** Adjusts layout for different screen sizes.

**Components:**

- `Navbar`: Container for navigation elements.
- `Logo`: Project logo.
- `ProjectName`: Displays the name of the project.
- `AuthButton`: Handles sign-in actions.

### 2. Home Page

**Features:**

- **Comparison Table:** Displays comparisons between GSM operators using Recharts.
- **Share Bill Button:** Allows users to share their bill information.
- **Comparison Charts:** Visual representations of GSM operator data fetched from Supabase.

#### 2.1 Comparison Table

- **Library:** Recharts.
- **Data Source:** Supabase database (`providers` and `user_bills` tables).
- **Functionality:** Displays key metrics for each GSM operator.

#### 2.2 Share Bill Button and Pop-up

- **Button Location:** Below the comparison table.
- **Functionality:**
  - **Signed-In Users:** Opens a pop-up to enter bill information with an anonymity notice.
  - **Non-Signed-In Users:** Redirects to the sign-in/sign-up page using Clerk.
- **Components:**
  - `ShareBillButton`
  - `ShareBillModal`: Form for inputting bill details.

#### 2.3 Comparison Charts

- **Library:** Recharts.
- **Data Source:** Supabase (`providers` and `user_bills`).
- **Functionality:** Multiple charts comparing different metrics across GSM operators.

### 3. Authentication

**Features:**

- **Sign In / Sign Up:** Managed by Clerk.
- **User Profile:** Displays user information and allows profile management.

#### 3.1 Sign In / Sign Up

- **Library:** Clerk.
- **Components:**
  - `SignInPage`
  - `SignUpPage`
- **Functionality:**
  - Modal-based authentication forms.

#### 3.2 User Profile

- **Library:** Clerk.
- **Components:**
  - `ProfilePage`
- **Functionality:** Allows users to view and manage their profile details.

### 4. Supabase Integration

**Features:**

- **Database Client:** Connect to Supabase using environment variables.
- **Data Fetching:** Retrieve and manipulate data from Supabase tables.
- **Real-Time Updates:** Optional real-time data synchronization.

### 5. API Routes

**Features:**

- **Data Handling:** Manage CRUD operations for user bills and providers.
- **Security:** Protect routes using Clerk authentication and Supabase RLS.

**Components:**

- `api/providers`: Handles provider data.
- `api/user-bills`: Manages user-submitted bills.
- Additional API endpoints as needed.

---

## Detailed Step-by-Step Instructions

### 1. Setting Up the Project

1. **Initialize Next.js Project:**
   ```bash
   npx create-next-app@latest seffaf-fatura --typescript
   ```

2. **Navigate to Project Directory:**
   ```bash
   cd seffaf-fatura
   ```

3. **Install Dependencies:**
   ```bash
   npm install @clerk/nextjs@latest @radix-ui/react-icons @radix-ui/react-slot @supabase/supabase-js class-variance-authority clsx lucide-react recharts tailwind-merge shadcn/ui
   ```

4. **Set Up TailwindCSS:**
   ```bash
   npx tailwindcss init -p
   ```

### 2. Configuring Environment Variables

1. **Create `.env.local` File:**
   ```env
   NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
   NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
   NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key
   CLERK_SECRET_KEY=your_clerk_secret_key
   ```

2. **Ensure `.env.local` is in `.gitignore`:**
   ```gitignore
   # local env files
   .env*.local
   ```

### 3. Implementing Authentication with Clerk

1. **Initialize Clerk:**
   - Follow Clerk's [Next.js integration guide](https://docs.clerk.dev/integrations/nextjs).

2. **Configure Clerk in `app/layout.tsx`:**
   ```typescript
   import { ClerkProvider } from '@clerk/nextjs'

   export default function RootLayout({ children }: { children: React.ReactNode }) {
     return (
       <ClerkProvider>
         <html lang="en">
           <body>{children}</body>
         </html>
       </ClerkProvider>
     )
   }
   ```

3. **Protect Routes with Middleware (`middleware.ts`):**
   ```typescript
   import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'

   const isProtectedRoute = createRouteMatcher(['/share-bill(.*)'])

   export default clerkMiddleware((auth, req) => {
     if (isProtectedRoute(req)) auth().protect()
   })

   export const config = {
     matcher: [
       '/((?!_next|[^?]*\\.(?:html?|css|js|jpe?g|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
       '/(api|trpc)(.*)',
     ],
   }
   ```

### 4. Designing the Navbar

1. **Create `components/Navbar.tsx`:**
   ```typescript
   import Link from 'next/link'
   import { AuthUI } from '@/components/AuthUI'
   import { cn } from '@/lib/utils'

   export default function Navbar() {
     return (
       <nav className="flex justify-between items-center p-4 bg-background shadow">
         <div className="flex items-center gap-2">
           <img src="/logo.png" alt="Logo" className="h-8 w-8" />
           <span className="font-bold text-xl">Anonim Mobil Fatura Takip√ßisi</span>
         </div>
         <AuthUI />
       </nav>
     )
   }
   ```

2. **Update `app/layout.tsx` to Include Navbar:**
   ```typescript
   import Navbar from '@/components/Navbar'

   export default function RootLayout({ children }: { children: React.ReactNode }) {
     return (
       <ClerkProvider>
         <html lang="en">
           <body>
             <Navbar />
             {children}
           </body>
         </html>
       </ClerkProvider>
     )
   }
   ```

### 5. Building the Home Page

#### 5.1 Creating the Comparison Table

1. **Create `components/ComparisonTable.tsx`:**
   ```typescript
   import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'
   import { useEffect, useState } from 'react'
   import { createSupabaseClient } from '@/lib/supabase'

   interface ProviderData {
     name: string
     five_gb_price: number
     ten_gb_price: number
     // Add other package prices
   }

   export default function ComparisonTable() {
     const [data, setData] = useState<ProviderData[]>([])

     useEffect(() => {
       const fetchData = async () => {
         const supabase = await createSupabaseClient()
         const { data, error } = await supabase.from('providers').select('*')
         if (error) console.error(error)
         else setData(data as ProviderData[])
       }

       fetchData()
     }, [])

     return (
       <ResponsiveContainer width="100%" height={400}>
         <BarChart data={data}>
           <CartesianGrid strokeDasharray="3 3" />
           <XAxis dataKey="name" />
           <YAxis />
           <Tooltip />
           <Bar dataKey="five_gb_price" fill="#8884d8" />
           <Bar dataKey="ten_gb_price" fill="#82ca9d" />
           {/* Add more Bars for other packages */}
         </BarChart>
       </ResponsiveContainer>
     )
   }
   ```

2. **Include `ComparisonTable` in Home Page:**
   ```typescript:app/page.tsx
   import ComparisonTable from '@/components/ComparisonTable'

   export default function HomePage() {
     return (
       <ClerkProvider>
         <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
           {/* Existing components */}
           <ComparisonTable />
           {/* Other components */}
         </div>
       </ClerkProvider>
     )
   }
   ```

#### 5.2 Implementing the Share Bill Feature

1. **Create `components/ShareBillButton.tsx`:**
   ```typescript
   import { Button } from '@/components/ui/button'
   import { useUser } from '@clerk/nextjs'
   import { useState } from 'react'
   import ShareBillModal from './ShareBillModal'
   import { useRouter } from 'next/router'

   export default function ShareBillButton() {
     const { isSignedIn } = useUser()
     const [isOpen, setIsOpen] = useState(false)
     const router = useRouter()

     const handleClick = () => {
       if (isSignedIn) {
         setIsOpen(true)
       } else {
         router.push('/sign-in')
       }
     }

     return (
       <>
         <Button onClick={handleClick} size="lg">
           Share Your Bill Information
         </Button>
         {isOpen && <ShareBillModal onClose={() => setIsOpen(false)} />}
       </>
     )
   }
   ```

2. **Create `components/ShareBillModal.tsx`:**
   ```typescript
   import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogClose } from '@/components/ui/dialog'
   import { useState } from 'react'
   import { Input } from '@/components/ui/input'
   import { Button } from '@/components/ui/button'
   import { createSupabaseClient } from '@/lib/supabase'
   import { useUser } from '@clerk/nextjs'

   interface ShareBillModalProps {
     onClose: () => void
   }

   export default function ShareBillModal({ onClose }: ShareBillModalProps) {
     const [phoneNumber, setPhoneNumber] = useState('')
     const [providerId, setProviderId] = useState('')
     const [gigabytePackage, setGigabytePackage] = useState<number>(0)
     const { user } = useUser()

     const handleSubmit = async (e: React.FormEvent) => {
       e.preventDefault()
       const supabase = await createSupabaseClient()
       const { error } = await supabase.from('user_bills').insert([
         {
           phone_number: phoneNumber,
           provider_id: providerId,
           gigabyte_package: gigabytePackage,
           user_id: user?.id,
         },
       ])
       if (error) {
         console.error(error)
       } else {
         onClose()
       }
     }

     return (
       <Dialog open>
         <DialogContent>
           <DialogHeader>
             <DialogTitle>Share Your Bill Information</DialogTitle>
             <DialogClose onClick={onClose} />
           </DialogHeader>
           <form onSubmit={handleSubmit} className="space-y-4">
             <Input
               type="text"
               placeholder="Phone Number"
               value={phoneNumber}
               onChange={(e) => setPhoneNumber(e.target.value)}
               required
             />
             <Input
               type="text"
               placeholder="Provider ID"
               value={providerId}
               onChange={(e) => setProviderId(e.target.value)}
               required
             />
             <Input
               type="number"
               placeholder="Gigabyte Package"
               value={gigabytePackage}
               onChange={(e) => setGigabytePackage(Number(e.target.value))}
               required
             />
             <Button type="submit">Submit Anonymously</Button>
           </form>
         </DialogContent>
       </Dialog>
     )
   }
   ```

3. **Include `ShareBillButton` in Home Page:**
   ```typescript:app/page.tsx
   import ShareBillButton from '@/components/ShareBillButton'

   export default function HomePage() {
     return (
       <ClerkProvider>
         <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
           {/* Existing components */}
           <ShareBillButton />
           {/* Other components */}
         </div>
       </ClerkProvider>
     )
   }
   ```

#### 5.3 Adding Comparison Charts

1. **Create `components/ComparisonCharts.tsx`:**
   ```typescript
   import { useEffect, useState } from 'react'
   import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'
   import { createSupabaseClient } from '@/lib/supabase'

   interface ChartData {
     provider: string
     average_bill: number
     // Add other metrics as needed
   }

   export default function ComparisonCharts() {
     const [data, setData] = useState<ChartData[]>([])

     useEffect(() => {
       const fetchData = async () => {
         const supabase = await createSupabaseClient()
         const { data, error } = await supabase.from('user_bills').select('provider:providers(name), average_bill')
         if (error) console.error(error)
         else setData(data as ChartData[])
       }

       fetchData()
     }, [])

     return (
       <ResponsiveContainer width="100%" height={400}>
         <BarChart data={data}>
           <CartesianGrid strokeDasharray="3 3" />
           <XAxis dataKey="provider" />
           <YAxis />
           <Tooltip />
           <Bar dataKey="average_bill" fill="#8884d8" />
           {/* Add more Bars for other metrics */}
         </BarChart>
       </ResponsiveContainer>
     )
   }
   ```

2. **Include `ComparisonCharts` in Home Page:**
   ```typescript:app/page.tsx
   import ComparisonCharts from '@/components/ComparisonCharts'

   export default function HomePage() {
     return (
       <ClerkProvider>
         <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
           {/* Existing components */}
           <ComparisonCharts />
           {/* Other components */}
         </div>
       </ClerkProvider>
     )
   }
   ```

### 6. Integrating Supabase

1. **Create Supabase Client (`lib/supabase.ts`):**
   ```typescript:lib/supabase.ts
   import { createClient } from '@supabase/supabase-js'
   import { auth } from '@clerk/nextjs'

   const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
   const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

   export const createSupabaseClient = () => {
     return createClient(supabaseUrl, supabaseAnonKey)
   }
   ```

2. **Fetch Data in Components:**
   - Use the `createSupabaseClient` function to interact with the database as shown in previous sections.

### 7. Setting Up RLS Policies

1. **Enable RLS on `user_bills` Table:**
   ```sql
   ALTER TABLE user_bills ENABLE ROW LEVEL SECURITY;
   ```

2. **Create Policies:**
   - **Allow Insert for Authenticated Users:**
     ```sql
     CREATE POLICY "Allow insert for authenticated users" ON user_bills
     FOR INSERT
     WITH CHECK (auth.uid() = user_id);
     ```

   - **Allow Select for Owners:**
     ```sql
     CREATE POLICY "Allow select for owners" ON user_bills
     FOR SELECT
     USING (auth.uid() = user_id);
     ```

   - **Allow Update/Delete for Owners:**
     ```sql
     CREATE POLICY "Allow update/delete for owners" ON user_bills
     FOR UPDATE, DELETE
     USING (auth.uid() = user_id);
     ```

3. **Verify Policies:**
   - Test by attempting operations as different users to ensure security.

### 8. Deploying the Application

1. **Choose Deployment Platform:**
   - **Vercel** is recommended for Next.js applications.

2. **Set Up Vercel Integration:**
   - Push the project to a Git repository (e.g., GitHub).
   - Import the repository in Vercel.
   - Configure environment variables in Vercel settings.

3. **Deploy:**
   - Trigger a deployment through Vercel's dashboard or by pushing commits to the main branch.

---

## Codebase Suggestions

1. **Consistent Naming Conventions:**
   - Ensure all components and files follow a consistent naming pattern (e.g., `PascalCase` for components).

2. **Modularize Code:**
   - Break down large components into smaller, reusable ones for better maintainability.

3. **Implement Type Safety:**
   - Define TypeScript interfaces for all data structures fetched from Supabase.

4. **Optimize Supabase Client:**
   - Consider using a singleton pattern for the Supabase client to avoid multiple instances.

5. **Error Handling:**
   - Implement comprehensive error handling in all data-fetching operations.

6. **Use Environment Variables Securely:**
   - Avoid exposing sensitive keys on the client-side. Only expose what's necessary using `NEXT_PUBLIC_` prefix.

7. **Improve Styling:**
   - Leverage TailwindCSS utility classes effectively and consider using Shadcn UI components for consistency.

8. **Enhance Accessibility:**
   - Ensure all interactive elements are accessible, with proper ARIA attributes and keyboard navigation support.

9. **Optimize Performance:**
   - Utilize Next.js features like dynamic imports and server-side rendering where appropriate.

10. **Documentation:**
    - Comment complex logic and maintain updated documentation for future reference.

---

## Conclusion

This design document outlines a comprehensive plan to develop the "Anonim Mobil Fatura Takip√ßisi" project. By following the detailed steps and implementing the recommended database and codebase improvements, the project will achieve its goal of providing users with an efficient and secure platform to compare GSM operator bills anonymously. Continuous adherence to best practices in coding, security, and user experience will ensure the application's success and scalability.

If further clarification or assistance is needed, feel free to reach out with specific queries.